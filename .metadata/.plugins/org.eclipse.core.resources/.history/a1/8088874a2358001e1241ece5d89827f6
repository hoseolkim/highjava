package kr.or.ddit.adrs.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import kr.or.ddit.common.exception.PersistenceException;
import kr.or.ddit.db.ConnectionFactory;
import kr.or.ddit.utils.SampleDataMapperUtils;
import kr.or.ddit.vo.AddressVO;

public class AddressDAOImpl implements AddressDAO {

	@Override
	public int insertAddress(AddressVO adrsVO) {
		StringBuffer sql = new StringBuffer();
		sql.append("insert into addressbook(");
		sql.append("ADRS_NO,     ");
		sql.append("MEM_ID,   ");
		sql.append("ADRS_NAME,   ");
		sql.append("ADRS_HP,    ");
		sql.append("ADRS_ADD)   ");
		sql.append(" values( ? , ? , ? , ? , ? )");
		try(
			Connection conn = ConnectionFactory.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(sql.toString());
		) {
			pstmt.setInt(1, adrsVO.getAdrsNo());
			pstmt.setString(2, adrsVO.getMemId());
			pstmt.setString(3, adrsVO.getAdrsName());
			pstmt.setString(4, adrsVO.getAdrsHp());
			pstmt.setString(5, adrsVO.getAdrsAdd());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			throw new PersistenceException(e);
		}
	}

	@Override
	public List<AddressVO> selectAddressList(String memId) {
		StringBuffer sql = new StringBuffer();
		sql.append("select ");
		sql.append("ADRS_NO,    ");
		sql.append("MEM_ID ,    ");
		sql.append("ADRS_NAME,  ");
		sql.append("ADRS_HP ,   ");
		sql.append("ADRS_ADD   ");
		sql.append(" from addressbook ");
		sql.append(" where mem_id = ? ");
		List<AddressVO> list = new ArrayList<AddressVO>();
		try(
			Connection conn = ConnectionFactory.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(sql.toString());
		) {
			pstmt.setString(1, memId);
			
			ResultSet rs = pstmt.executeQuery();
			while(rs.next()) {
				AddressVO vo = SampleDataMapperUtils.recordToVO(rs, AddressVO.class);
				list.add(vo);
			}
			return list;
		} catch (SQLException e) {
			throw new PersistenceException(e);
		}
	}

	@Override
	public int updateAddress(AddressVO adrsVO) {
		StringBuffer sql = new StringBuffer();
		try(
				Connection conn = ConnectionFactory.getConnection();
				PreparedStatement pstmt = conn.prepareStatement(sql.toString());
				) {
			
			return 0;
		} catch (SQLException e) {
			throw new PersistenceException(e);
		}
	}

	@Override
	public int deleteAddress(int adrsNo) {
		StringBuffer sql = new StringBuffer();
		try(
				Connection conn = ConnectionFactory.getConnection();
				PreparedStatement pstmt = conn.prepareStatement(sql.toString());
				) {
			
			return 0;
		} catch (SQLException e) {
			throw new PersistenceException(e);
		}
	}

}
