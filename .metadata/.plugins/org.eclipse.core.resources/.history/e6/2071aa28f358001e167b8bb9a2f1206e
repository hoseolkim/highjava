package kr.or.ddit.adrs.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.session.SqlSessionFactory;

import kr.or.ddit.db.CustomSqlSessionFactoryBuilder;
import kr.or.ddit.vo.AddressVO;

public class AddressDAOImpl implements AddressDAO {
	private SqlSessionFactory sqlSessionFactory = CustomSqlSessionFactoryBuilder.getSqlSessionFactory();
	
	private int generateAdrsNo(Connection conn) throws SQLException {
		
		try(
				sqlSessionFactory.openSession()
		){
			
		}
		
	}
	
	@Override
	public int insertAddress(AddressVO adrsVO) {
		StringBuffer sql = new StringBuffer();
		
		try(
			Connection conn = ConnectionFactory.getConnection();
		) {
			int adrsNo = generateAdrsNo(conn);
			adrsVO.setAdrsNo(adrsNo);
			PreparedStatement pstmt = SampleDataMapperUtils.generatePreparedStatement(conn , sql.toString() , adrsVO );
			
			int rowcnt = pstmt.executeUpdate();
			
			pstmt.close();
			
			return rowcnt;
		} catch (SQLException e) {
			throw new PersistenceException(e);
		} 
	}

	@Override
	public List<AddressVO> selectAddressList(String memId) {
		StringBuffer sql = new StringBuffer();

		List<AddressVO> list = new ArrayList<AddressVO>();
		try(
			Connection conn = ConnectionFactory.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(sql.toString());
		) {
			pstmt.setString(1, memId);
			
			ResultSet rs = pstmt.executeQuery();
			while(rs.next()) {
				AddressVO vo = SampleDataMapperUtils.recordToVO(rs, AddressVO.class);
				list.add(vo);
			}
			return list;
		} catch (SQLException e) {
			throw new PersistenceException(e);
		}
	}

	@Override
	public int updateAddress(AddressVO adrsVO) {
		StringBuffer sql = new StringBuffer();
		
		try(
			Connection conn = ConnectionFactory.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(sql.toString());
		) {
			pstmt.setString(1, adrsVO.getAdrsName());
			pstmt.setString(2, adrsVO.getAdrsHp());
			pstmt.setString(3, adrsVO.getAdrsAdd());
			pstmt.setInt(4, adrsVO.getAdrsNo());
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			throw new PersistenceException(e);
		}
	}

	@Override
	public int deleteAddress(int adrsNo) {
		StringBuffer sql = new StringBuffer();

		try(
			Connection conn = ConnectionFactory.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(sql.toString());
		) {
			pstmt.setInt(1, adrsNo);
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			throw new PersistenceException(e);
		}
	}

}
