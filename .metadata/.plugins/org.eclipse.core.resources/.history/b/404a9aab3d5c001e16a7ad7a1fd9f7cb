package kr.or.ddit.member.controller;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.Temporal;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.Converter;
import org.apache.commons.beanutils.converters.AbstractConverter;
import org.apache.commons.lang3.StringUtils;

import kr.or.ddit.common.enumpkg.ServiceResult;
import kr.or.ddit.member.service.MemberService;
import kr.or.ddit.member.service.MemberServiceImpl;
import kr.or.ddit.mvc.TilesViewResolver;
import kr.or.ddit.utils.PopulateUtils;
import kr.or.ddit.vo.MemberVO;

@WebServlet("/member/memberInsert.do")
public class MemberInsertControllerServlet extends HttpServlet {
	private MemberService service = new MemberServiceImpl();
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String viewName = "member/memberInsert";
		new TilesViewResolver().resolveView(viewName, req, resp);
	}
	/*
	private MemberVO validate(HttpServletRequest req) {
		MemberVO vo = null;
		boolean valid = true;
		String memId = req.getParameter("memId");
		String memPass = req.getParameter("memPass");
		String memName = req.getParameter("memName");
		String memRegno1 = req.getParameter("memRegno1");
		String memRegno2 = req.getParameter("memRegno2");
		String memBir = req.getParameter("memBir");
		String memZip = req.getParameter("memZip");
		String memAdd1 = req.getParameter("memAdd1");
		String memAdd2 = req.getParameter("memAdd2");
		String memHometel = req.getParameter("memHometel");
		String memComtel = req.getParameter("memComtel");
		String memHp = req.getParameter("memHp");
		String memMail = req.getParameter("memMail");
		String memJob = req.getParameter("memJob");
		String memLike = req.getParameter("memLike");
		String memMemorial = req.getParameter("memMemorial");
		String memMemorialday = req.getParameter("memMemorialday");
		
		valid &= StringUtils.isNotBlank(memId);
		valid &= StringUtils.isNotBlank(memPass);
		valid &= StringUtils.isNotBlank(memName);
		valid &= StringUtils.isNotBlank(memAdd1);
		valid &= StringUtils.isNotBlank(memAdd2);
		valid &= StringUtils.isNotBlank(memZip);
		valid &= StringUtils.isNotBlank(memMail);
		
		if(valid) {
			vo = new MemberVO();
			vo.setMemId(memId);
			vo.setMemPass(memPass);
			vo.setMemName(memName);
			vo.setMemRegno1(memRegno1);
			vo.setMemRegno2(memRegno2);
			if(StringUtils.isNotBlank(memBir)) {
				String[] bir = memBir.split("-");
				int year = Integer.parseInt(bir[0]);
				int month = Integer.parseInt(bir[1]);
				int day = Integer.parseInt(bir[2]);
				vo.setMemBir(LocalDate.of(year,month,day));
			}
			vo.setMemZip(memZip);
			vo.setMemAdd1(memAdd1);
			vo.setMemAdd2(memAdd2);
			vo.setMemHometel(memHometel);
			vo.setMemComtel(memComtel);
			vo.setMemHp(memHp);
			vo.setMemMail(memMail);
			vo.setMemJob(memJob);
			vo.setMemLike(memLike);
			vo.setMemMemorial(memMemorial);
			if(StringUtils.isNotBlank(memMemorialday)) {
				String[] days = memMemorialday.split("-");
				int year = Integer.parseInt(days[0]);
				int month = Integer.parseInt(days[1]);
				int day = Integer.parseInt(days[2]);
				vo.setMemMemorialday(LocalDate.of(year,month,day));
			}
		}
		return vo;
	}
	*/
	
	
	
	
//	1. 디코딩 설정
//	2. 파라미터 확보 --> MemberVO
//	3. 검증 (대상 : MemberVO)
//		통과
//			4. createMember 등록 처리
//				1) PKDUPLICATED
//					memberForm으로 이동(기존 입력 데이터, 메시지, dispatch)
//				2) OK
//					welcome page로 이동 (redirect)
//				3) FAIL
//					memberForm으로 이동(기존 입력 데이터, 메시지, dispatch)
//		불통
//			memberForm으로 이동(기존 입력 데이터, 검증 결과 메시지들... , dispatch)
/*
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		req.setCharacterEncoding("utf-8");
		
		MemberVO memberVO = validate(req);
		boolean result = false;
		if(memberVO != null) {
			ServiceResult res = service.createMember(memberVO);
			if(res.equals(ServiceResult.OK)) {
				result = true;
			}
		}
		
		
		
		String goPage = null;
		goPage = "redirect:/login/loginForm.jsp";
		if(!result) {
			goPage = "/member/memberInsert.tiles";
		}
		
		if(goPage.startsWith("redirect:")) {
			String location = req.getContextPath() + goPage.substring("redirect:".length());
			resp.sendRedirect(location);
		}else {
			req.getRequestDispatcher(goPage).forward(req, resp);
		}
//		/member/memberInsert
	}
 */
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//		1. 디코딩 설정
		req.setCharacterEncoding("utf-8");
//		2. 파라미터 확보 --> MemberVO
		MemberVO member = new MemberVO();
		Map<String, String[]> paramerterMap = req.getParameterMap();
		req.setAttribute("member", member);
		
		PopulateUtils.poppulate(member, paramerterMap);
		
		Map<String, String > errors = new HashMap<String, String>();
		req.setAttribute("errors", errors);
//		3. 검증 (대상 : MemberVO)
		boolean valid = validate(member, errors);
		String goPage = null;
		if(valid) {
//			통과
//				4. createMember 등록 처리
			ServiceResult result = service.createMember(member);
			switch (result) {
			case PKDUPLICATED:
//					1) PKDUPLICATED
//						memberForm으로 이동(기존 입력 데이터, 메시지, dispatch)
				req.setAttribute("message", "아이디 중복");
				goPage = "/member/memberInsert.tiles";
				break;
			case OK:
//					2) OK
//						welcome page로 이동 (redirect)
				goPage = "redirect:/";
				break;
			default:
//					3) FAIL
//						memberForm으로 이동(기존 입력 데이터, 메시지, dispatch)
				req.setAttribute("message", "서버 오류, 이따 다시 해봐용");
				goPage = "/member/memberInsert.tiles";
				break;
			}
			
		}else {
//			불통
//				memberForm으로 이동(기존 입력 데이터, 검증 결과 메시지들... , dispatch)
			goPage = "/member/memberInsert.tiles";
		}
		
		if(goPage.startsWith("redirect:")) {
			String location = req.getContextPath() + goPage.substring("redirect:".length());
			resp.sendRedirect(location);
		}else {
			req.getRequestDispatcher(goPage).forward(req, resp);
		}
		
		
	}

	private boolean validate(MemberVO member, Map<String, String> errors) {
		boolean valid = true;
		
		if (StringUtils.isBlank(member.getMemId())) {
			valid = false;
			errors.put("memId", "회원아이디누락");
		}
		if (StringUtils.isBlank(member.getMemPass())) {
			valid = false;
			errors.put("memPass", "비밀번호누락");
		}
		if (StringUtils.isBlank(member.getMemName())) {
			valid = false;
			errors.put("memName", "회원명누락");
		}
		if (StringUtils.isBlank(member.getMemZip())) {
			valid = false;
			errors.put("memZip", "우편번호누락");
		}
		if (StringUtils.isBlank(member.getMemAdd1())) {
			valid = false;
			errors.put("memAdd1", "주소1누락");
		}
		if (StringUtils.isBlank(member.getMemAdd2())) {
			valid = false;
			errors.put("memAdd2", "주소2누락");
		}
		if (StringUtils.isBlank(member.getMemMail())) {
			valid = false;
			errors.put("memMail", "이메일누락");
		}
		
		return valid;
	}
}
