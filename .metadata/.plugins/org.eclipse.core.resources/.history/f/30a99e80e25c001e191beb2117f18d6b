package kr.or.ddit.utils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import kr.or.ddit.validate.grouphint.InsertGroup;
import kr.or.ddit.vo.MemberVO;


public class ValidationUtils {
	private static Validator validator;
	static {
		ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
		validator = factory.getValidator();
	}
	
	public static <T> boolean vlidate(T target, Map<String, List<String>> errors, Class<?>... groupHints) {
Set<ConstraintViolation<MemberVO>> constraintViolations = validator.validate(member,InsertGroup.class);
		
		if(constraintViolations.isEmpty()) {
			System.out.println("검증 통과");
		}else {
			constraintViolations.stream()
				.forEach((cv)->{
					String propName = cv.getPropertyPath().toString();
					String message = cv.getMessage();
					List<String> already = errors.get(propName);
					if(already==null) {
						already = new ArrayList<String>();
						errors.put(propName, already);
					}
					already.add(message);
				});
			errors.forEach((k,v)->{
					System.err.printf("%s : %s\n",k,v);
			});
		}
	}
	
}
